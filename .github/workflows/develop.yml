name: Backend Development Deployment

on:
  push:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts

      - name: Build and push Backend Docker image
        env:
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          TAG: dev-${GITHUB_SHA}
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login ${{ secrets.DOCKER_REGISTRY }} -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_REGISTRY }}/backend:${TAG} .
          docker push ${{ secrets.DOCKER_REGISTRY }}/backend:${TAG}

      - name: Deploy to Development Server
        env:
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
          TAG: dev-${GITHUB_SHA}
        run: |
          # Deploy with zero downtime using Docker Swarm
          ssh ${{ secrets.USER }}@${{ secrets.HOST }} "cd /opt/app && \
          export TAG=$TAG && \
          export DOCKER_REGISTRY=$DOCKER_REGISTRY && \
          
          # Initialize Docker Swarm if not already initialized
          docker swarm init 2>/dev/null || true && \
          
          # Create or update Docker config
          docker config create backend-config-${TAG} infra/docker/docker-compose.dev.yml 2>/dev/null || true && \
          
          # Deploy or update service with rolling update
          docker service update \
            --image $DOCKER_REGISTRY/backend:${TAG} \
            --update-parallelism 1 \
            --update-delay 10s \
            --update-order start-first \
            --update-failure-action rollback \
            --rollback-parallelism 1 \
            backend-service 2>/dev/null || \
          docker service create \
            --name backend-service \
            --replicas 2 \
            --update-parallelism 1 \
            --update-delay 10s \
            --update-order start-first \
            --update-failure-action rollback \
            --rollback-parallelism 1 \
            --publish 1337:1337 \
            --network app-network \
            --config source=backend-config-${TAG},target=/app/config.yml \
            $DOCKER_REGISTRY/backend:${TAG} && \
          
          # Clean up old configs
          docker config ls --filter name=backend-config-* -q | head -n -5 | xargs -r docker config rm"
